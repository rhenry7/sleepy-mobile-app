{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.App = App;\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeTrackPlayer = _interopRequireDefault(require(\"react-native-track-player\"));\n\nvar _player = require(\"./components/player.js\");\n\nvar _reactDom = require(\"react-dom\");\n\nvar _jsxFileName = \"/Users/ramonehenry/Documents/code/codeprojects/AwesomeProject/App.js\";\n\nfunction App() {\n  var _this = this;\n\n  function mainPlay() {\n    return _regenerator.default.async(function mainPlay$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regenerator.default.awrap(_reactNativeTrackPlayer.default.setupPlayer().then(function () {\n              console.log('player is setup');\n            }));\n\n          case 2:\n            _reactNativeTrackPlayer.default.registerPlaybackService(function () {\n              return require('./components/service.js');\n            });\n\n            _reactNativeTrackPlayer.default.updateOptions({\n              stopWithApp: true,\n              capabilities: [_reactNativeTrackPlayer.default.CAPABILITY_PLAY, _reactNativeTrackPlayer.default.CAPABILITY_PAUSE, _reactNativeTrackPlayer.default.CAPABILITY_SKIP_TO_NEXT, _reactNativeTrackPlayer.default.CAPABILITY_SKIP_TO_PREVIOUS, _reactNativeTrackPlayer.default.CAPABILITY_STOP],\n              compactCapabilities: [_reactNativeTrackPlayer.default.CAPABILITY_PLAY, _reactNativeTrackPlayer.default.CAPABILITY_PAUSE]\n            });\n\n            (function _callee(playApp) {\n              var playerState;\n              return _regenerator.default.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      console.log('The app is playing');\n                      _context.next = 3;\n                      return _regenerator.default.awrap(_reactNativeTrackPlayer.default.getState());\n\n                    case 3:\n                      playerState = _context.sent;\n\n                      if (playerState !== _reactNativeTrackPlayer.default.STATE_PLAYING) {\n                        (0, _player.startPlayer)();\n                      } else {\n                        _reactNativeTrackPlayer.default.pause();\n                      }\n\n                    case 5:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            });\n\n            ;\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  (0, _reactDom.render)();\n  var playText = this.state.isPlaying ? 'Pause' : 'Play';\n  return _react.default.createElement(_react.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.StatusBar, {\n    barStyle: \"dark-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: styles.buttonSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: styles.playText,\n    onPress: function onPress() {\n      return _this.playWhiteNoise();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, playText))));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF'\n  },\n  description: {\n    width: '80%',\n    marginTop: 20,\n    textAlign: 'center'\n  },\n  player: {\n    marginTop: 40\n  },\n  state: {\n    marginTop: 20\n  },\n  buttonSection: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'black'\n  },\n  playText: {\n    color: 'white',\n    fontSize: 36,\n    textAlign: 'center'\n  }\n});\n\nvar _default = App;\nexports.default = _default;","map":{"version":3,"sources":["/Users/ramonehenry/Documents/code/codeprojects/AwesomeProject/App.js"],"names":["App","mainPlay","TrackPlayer","setupPlayer","then","console","log","registerPlaybackService","require","updateOptions","stopWithApp","capabilities","CAPABILITY_PLAY","CAPABILITY_PAUSE","CAPABILITY_SKIP_TO_NEXT","CAPABILITY_SKIP_TO_PREVIOUS","CAPABILITY_STOP","compactCapabilities","playApp","getState","playerState","STATE_PLAYING","pause","playText","state","isPlaying","styles","buttonSection","playWhiteNoise","StyleSheet","create","container","flex","alignItems","backgroundColor","description","width","marginTop","textAlign","player","flexDirection","justifyContent","color","fontSize"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport {StyleSheet, View, Text, StatusBar} from 'react-native';\nimport TrackPlayer from 'react-native-track-player'; // initializes the player\nimport {startPlayer} from './components/player.js';\nimport {render} from 'react-dom';\n\nexport function App() {\n    \n//   console.log('start app')\n  async function mainPlay() {\n    \n    await TrackPlayer.setupPlayer().then(() => {\n      // The player is ready to be used\n      console.log('player is setup');\n    });\n    TrackPlayer.registerPlaybackService(() => require('./components/service.js'));\n\n    TrackPlayer.updateOptions({\n        //   console.log('update options'),\n        // test \n          stopWithApp: true,\n          capabilities: [\n              TrackPlayer.CAPABILITY_PLAY,\n              TrackPlayer.CAPABILITY_PAUSE,\n              TrackPlayer.CAPABILITY_SKIP_TO_NEXT,\n              TrackPlayer.CAPABILITY_SKIP_TO_PREVIOUS,\n              TrackPlayer.CAPABILITY_STOP,\n          ],\n          compactCapabilities: [\n              TrackPlayer.CAPABILITY_PLAY,\n              TrackPlayer.CAPABILITY_PAUSE,\n          ],\n      });\n    // await TrackPlayer.play();\n\n    async (playApp) => {\n      console.log('The app is playing');\n      const playerState = await TrackPlayer.getState();\n\n      if (playerState !== TrackPlayer.STATE_PLAYING) {\n        startPlayer();\n      } else {\n        TrackPlayer.pause();\n      }\n    };\n;\n  }\n\n  render();\n  const playText = this.state.isPlaying ? 'Pause' : 'Play';\n  return (\n    <Fragment>\n      <StatusBar barStyle=\"dark-content\" />\n      <View style={styles.buttonSection}>\n        <View>\n          <Text style={styles.playText} onPress={() => this.playWhiteNoise()}>\n            {playText}\n          </Text>\n        </View>\n      </View>\n    </Fragment>\n  );\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  description: {\n    width: '80%',\n    marginTop: 20,\n    textAlign: 'center',\n  },\n  player: {\n    marginTop: 40,\n  },\n  state: {\n    marginTop: 20,\n  },\n  buttonSection: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'black',\n  },\n  playText: {\n    color: 'white',\n    fontSize: 36,\n    textAlign: 'center',\n  },\n});\n\nexport default App;\n"]},"metadata":{},"sourceType":"script"}